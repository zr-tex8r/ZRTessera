#
# gen-map.pl
# Generate
use strict;
use GTTronCode;
my $indir = (defined $ENV{ZR_EXT_REF}) ?
         "$ENV{ZR_EXT_REF}/PXgtfont" : '.';
my $in2dir = (defined $ENV{ZR_PRIVATE_DATA}) ?
         "$ENV{ZR_PRIVATE_DATA}" : '.';
require 'gtc-data.pl';
my (@sjis, %map);

# Note: mapping change (perhaps due to correction)
#  16173  09-9674  01-9DA0
#  19829  01-8CE7  09-9674
#  20067  01-9DA0  01-8CE7

#### delete table
my $delete = <<'END';
005145 005168
019637 019462
000176 003212
004099 011027
015756 015743
018424 018411
020402 020409
023501 023453
030105 030084
031062 031070
038622 018289
040041 040246
040229 040241
040290 040546
040434 040433
040451 040399
041838 041872
045250 063839
051124 051130
067166 000000
068023 000000
068891 068889
068931 068930
069365 000000
069486 000000
069609 000000
069696 000000
069803 000000
069811 000000
069948 000000
069989 000000
070027 000000
070299 000000
070322 000000
070365 000000
070438 000000
070470 000000
070766 000000
070802 000000
070942 000000
070955 000000
071207 000000
071253 000000
071360 000000
071395 000000
071398 000000
071507 000000
071604 000000
071847 000000
071910 000000
071968 000000
072001 000000
072219 000000
072666 000000
072752 000000
072801 000000
073150 000000
073299 000000
073323 000000
073380 000000
073562 000000
073851 000000
073949 000000
074092 000000
074559 000000
074723 000000
075124 000000
075636 000000
075761 000000
075791 000000
075814 000000
075867 000000
075885 000000
075926 000000
076062 000000
076117 000000
076144 000000
076160 000000
076303 000000
076377 000000
076448 000000
076614 000000
076653 000000
076708 000000
076728 000000
077024 000000
077185 000000
077206 000000
077232 000000
077304 000000
077451 000000
077607 000000
077670 000000
077696 000000
077720 000000
077831 000000
077832 000000
078018 000000
078047 000000
END
{
  foreach (split(m/\n/, $delete)) {
    m/^(\d+) (\d+)$/ or die;
    $sjis[$1] = ($2 == 0) ? undef : ">$2";
  }
}

#### gtindex.txt
@ARGV = "$in2dir/gtindex.txt";
{
  local ($_);
  while (<>) {
    if (m|^(\d{5}),(\d\d-\w\w\w\w)|)
    { $sjis[$1] = "$2"; }
  }
}

#### from-Unicode map (gtc-data)
{
  my ($gt, $uc, $ary);
  for $gt (1 .. 78774) {
    (defined($ary = GTData::gtdata($gt))) or next;
    (($uc = $ary->[GTData::UCODE()]) != 0) or next;
    $map{$uc} = $gt;
  }
}

#### print
{
  my (@cnks);
#---------------------------------------------------------------------
push(@cnks, <<'END');
#
# ZRGTCode.pm
# This module was generated by gen-ZRGTCode.pl.
package ZRGTCode;
use strict qw( refs vars subs );
require Exporter;
our @ISA = qw( Exporter );
our @EXPORT = qw(
  gt_to_sjis gt_to_ucs ucs_to_gt
  sjposition uctogt
);
our @EXPORT_OK = qw( );

our @sjpos = (
END
#---------------------------------------------------------------------
  foreach my $gc (0 .. $#sjis) {
    my $sc = $sjis[$gc];
    push(@cnks, ((defined $sc) ? "'$sc'" : "undef") . ",\n");
  }
#---------------------------------------------------------------------
push(@cnks, <<'END');
);
sub sjposition { $sjpos[$_[0]]; }
sub gt_to_sjis { $sjpos[$_[0]]; }

our %uctogt = (
END
#---------------------------------------------------------------------
  foreach my $uc (sort {$a <=> $b} (keys %map)) {
    push(@cnks, sprintf("0x%04X,%6d,\n", $uc, $map{$uc}));
  }
#---------------------------------------------------------------------
push(@cnks, <<'END');
);
sub ucs_to_gt { $uctogt{$_[0]}; }
sub uctogt { $uctogt{$_[0]}; }
our %gttouc = reverse %uctogt;
sub gt_to_ucs { $gttouc{$_[0]}; }
1;
# EOF
END
#---------------------------------------------------------------------
  open(my $ho, '>', "ZRGTCode.pm") or die;
  print $ho (@cnks);
  close($ho);
}
# EOF
