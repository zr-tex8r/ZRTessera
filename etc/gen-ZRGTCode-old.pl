#
# gen-map.pl
# Generate
use strict;
use GTTronCode;
my $indir = (defined $ENV{ZR_EXT_REF}) ?
         "$ENV{ZR_EXT_REF}/PXgtfont" : '.';
require 'gtc-data.pl';
my (@sjis, %map);

#### delete table
my $delete = <<'END';
005145 005168
019637 019462
000176 003212
004099 011027
015756 015743
018424 018411
020402 020409
023501 023453
030105 030084
031062 031070
038622 018289
040041 040246
040229 040241
040290 040546
040434 040433
040451 040399
041838 041872
045250 063839
051124 051130
END
{
  foreach (split(m/\n/, $delete)) {
    m/^(\d+) (\d+)$/ or die;
    $sjis[$1] = ">$2";
  }
}

#### CDbook??.htm
@ARGV = map { "$indir/CDbook${_}1.htm" } (1..5);
{
  my (@a, @b, @c); local ($_);
  while (<>) {
    if (m|<td><font size="1">(\d{6})</font>|)
    { push(@a, $1); }
    elsif (m|<td><font size="1">GT(\d{2})</font>|)
    { push(@b, $1); }
    elsif (m|<td><font size="1">([0-9A-F]{4})</font>|)
    { push(@c, $1); }
  }
  foreach (0 .. $#a) {
    $sjis[$a[$_]] = $b[$_] . "-" . $c[$_];
  }
}

#### GT11MAP8.TXT
@ARGV = "$indir/GT11MAP8.TXT";
{
  local ($_);
  while (<>) {
    if (m|^(\d{6})\s+\S+\s+(\w{4})\s|)
    { $sjis[$1] = "11-$2"; }
  }
}

#### from-Unicode map (gtc-data)
{
  my ($gt, $uc, $ary);
  for $gt (1 .. 69263) {
    (defined($ary = GTData::gtdata($gt))) or next;
    (($uc = $ary->[GTData::UCODE()]) != 0) or next;
    $map{$uc} = $gt;
  }
}

#### print
{
  my (@cnks);
#---------------------------------------------------------------------
push(@cnks, <<'END');
#
# ZRGTCode.pm
# This module was generated by gen-ZRGTCode.pl.
package ZRGTCode;
use strict qw( refs vars subs );
require Exporter;
our @ISA = qw( Exporter );
our @EXPORT = qw(
  gt_to_sjis gt_to_ucs ucs_to_gt
  sjposition uctogt
);
our @EXPORT_OK = qw( );

our @sjpos = (
END
#---------------------------------------------------------------------
  foreach my $gc (0 .. $#sjis) {
    my $sc = $sjis[$gc];
    push(@cnks, ((defined $sc) ? "'$sc'" : "undef") . ",\n");
  }
#---------------------------------------------------------------------
push(@cnks, <<'END');
);
sub sjposition { $sjpos[$_[0]]; }
sub gt_to_sjis { $sjpos[$_[0]]; }

our %uctogt = (
END
#---------------------------------------------------------------------
  foreach my $uc (sort {$a <=> $b} (keys %map)) {
    push(@cnks, sprintf("0x%04X,%6d,\n", $uc, $map{$uc}));
  }
#---------------------------------------------------------------------
push(@cnks, <<'END');
);
sub ucs_to_gt { $uctogt{$_[0]}; }
sub uctogt { $uctogt{$_[0]}; }
our %gttouc = reverse %uctogt;
sub gt_to_ucs { $gttouc{$_[0]}; }
1;
# EOF
END
#---------------------------------------------------------------------
  open(my $ho, '>', "ZRGTCode.pm") or die;
  print $ho (@cnks);
  close($ho);
}
# EOF
